<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>StrexBot - Administration</title>
    <link rel="icon" type="image/png" href="/S.png">
    <link rel="stylesheet" href="/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

    <meta property="og:title" content="StrexBot - Administration">
    <meta property="og:description" content="Panneau d'administration StrexBot.">
    <meta property="og:url" content="https://strexbot.xyz/admin">
    <meta property="og:image" content="https://strexbot.xyz/S.png">
    <meta property="og:type" content="website">
    <meta name="theme-color" content="#f59e0b">
</head>
<body>
    <div id="app-container">
        <div class="error-page">
            <h1>Accès Refusé</h1>
            <p>Vous n'avez pas les autorisations nécessaires pour accéder à cette page.</p>
            <a href="/" onclick="event.preventDefault(); navigate('/')">Retour à l'accueil</a>
        </div>
    </div>

    <div id="toast-container"></div>

    <script>
        // --- Configuration ---
        const API_URL = 'https://api-s5et.onrender.com';
        const SITE_URL = 'https://strexbot.xyz';
        const DISCORD_CLIENT_ID = '1379440380860174506';

        // --- Démarrage de l'Application ---
        document.addEventListener('DOMContentLoaded', async () => {
            await renderAdminPage();
        });

        function navigate(path) {
            window.location.href = path;
        }

        async function renderAdminPage() {
            const container = document.getElementById('app-container');
            try {
                const userData = await apiFetch('/api/user_data');
                if (!userData || !userData.is_admin) throw new Error('Non admin');
        
                container.innerHTML = `
                    <div class="admin-layout">
                        <aside class="admin-sidebar">
                            <div class="admin-sidebar-header">StrexBot Admin</div>
        
                            <nav class="admin-nav">
                                <a href="#" class="admin-nav-link active" data-page="users"><i class="fas fa-users"></i> <span>Utilisateurs</span></a>
                                <a href="#" class="admin-nav-link" data-page="offer"><i class="fas fa-gift"></i> <span>Offre</span></a>
                                <a href="#" class="admin-nav-link" data-page="maintenance"><i class="fas fa-tools"></i> <span>Maintenance</span></a>
                            </nav>
                            <a href="/" class="admin-back-home">Accueil</a>
                        </aside>
                        <main id="admin-main-content" class="admin-main"></main>
                    </div>
                `;
                loadAdminPage('users');
                setupAdminNav();
            } catch (e) {
                container.innerHTML = `
                    <div class="error-page">
                        <h1>Accès Refusé</h1>
                        <p>Vous n'avez pas les autorisations nécessaires pour accéder à cette page.</p>
                        <a href="../">Retour à l'accueil</a>
                    </div>
                `;
            }
        }
        
        function loadAdminPage(page) {
            const contentArea = document.getElementById('admin-main-content');
            if (!contentArea) return;
             if (page === 'users') {
                 contentArea.innerHTML = `<h2>Gestion des Utilisateurs</h2><input type="text" id="user-search-input" class="admin-input" placeholder="Rechercher par ID ou pseudo..."><div id="user-search-results" class="search-results-container"></div>`;
                 document.getElementById('user-search-input').addEventListener('input', handleUserSearch);
             } else if (page === 'maintenance') {
                contentArea.innerHTML = `<h2>Mode Maintenance</h2>
                    <div class="maintenance-card">
                        <div class="maintenance-toggle">
                            <h3>Activer la maintenance</h3>
                            <p>Lorsque la maintenance est activée, seuls les administrateurs peuvent se connecter au site.</p>
                            <label class="switch"><input type="checkbox" id="maintenance-checkbox"><span class="slider"></span></label>
                        </div>
                        <button id="save-maintenance-btn" class="admin-btn"><i class="fas fa-save"></i> Enregistrer</button>
                    </div>`;
                loadMaintenanceStatus();
             } else if (page === 'offer') {
                contentArea.innerHTML = `
                    <h2>Lancer une Offre Globale</h2>
                    <div class="account-card">
                        <p>Créez une offre que le premier visiteur connecté pourra réclamer sur la page d'accueil.</p>
                        <div id="create-offer-form">
                            <label for="offer-amount">Montant en pièces :</label>
                            <input type="number" id="offer-amount" class="admin-input" min="1" placeholder="Ex: 100">
                            
                            <label for="offer-message">Message de l'offre :</label>
                            <input type="text" id="offer-message" class="admin-input" placeholder="Ex: Soyez rapide !">
                            
                            <button class="btn btn-primary" onclick="createGlobalOffer()">Lancer l'Offre</button>
                        </div>
                    </div>`;
             }
        }

        // --- Fonctions de l'Admin Panel ---
        function setupAdminNav() {
            document.querySelectorAll('.admin-nav-link').forEach(link => {
                link.addEventListener('click', e => {
                    e.preventDefault();
                    document.querySelector('.admin-nav-link.active')?.classList.remove('active');
                    e.currentTarget.classList.add('active');
                    loadAdminPage(e.currentTarget.dataset.page);
                });
            });
        }
        
        async function handleUserSearch(event) {
            const query = event.target.value.trim();
            const resultsContainer = document.getElementById('user-search-results');
            if (query.length < 3) {
                resultsContainer.innerHTML = '';
                return;
            }
            const users = await apiFetch(`/api/admin/search_users?q=${encodeURIComponent(query)}`);
            if (users && Array.isArray(users)) {
                resultsContainer.innerHTML = users.map(user => `
                    <div class="user-card" id="user-card-${user.user_id}">
                        <div class="user-card-info">
                            <img src="${user.avatar_url}" class="user-card-avatar">
                            <div class="user-card-details">
                                <strong>${user.username}</strong>
                                <small>ID: ${user.user_id}</small>
                                <span class="user-card-coins" id="coins-${user.user_id}"><img src="/Coin.png" class="coin-mini"> ${user.coins}</span>
                            </div>
                        </div>
                        <div class="user-card-actions">
                             <input type="number" class="admin-input small-input" id="coins-input-${user.user_id}" placeholder="Montant">
                             <button class="admin-btn action-btn" onclick="updateUser('${user.user_id}', 'set_coins')">Définir</button>
                             <button class="admin-btn add-btn" onclick="updateUser('${user.user_id}', 'add_coins')">+</button>
                             <button class="admin-btn remove-btn" onclick="updateUser('${user.user_id}', 'remove_coins')">-</button>
                             <button class="admin-btn ${user.banned ? 'unban-btn' : 'ban-btn'}" onclick="updateUser('${user.user_id}', '${user.banned ? 'unban' : 'ban'}')">${user.banned ? 'Débannir' : 'Bannir'}</button>
                        </div>
                    </div>
                `).join('');
            } else {
                resultsContainer.innerHTML = '<p>Aucun utilisateur trouvé.</p>';
            }
        }
        
        async function updateUser(userId, action) {
            const input = document.getElementById(`coins-input-${userId}`);
            const value = (action.includes('coins')) ? input.value : null;
            if (action.includes('coins') && (!value || parseInt(value) < 0)) {
                showToast("Veuillez entrer un montant valide.", "error");
                return;
            }
            const result = await apiFetch(`/api/admin/update_user/${userId}`, {
                method: 'POST',
                body: JSON.stringify({ action, value })
            });
            if (result) {
                showToast("Utilisateur mis à jour !", "success");
                document.getElementById(`coins-${userId}`).innerHTML = `<img src="/Coin.png" class="coin-mini"> ${result.coins}`;
                if (action === 'ban' || action === 'unban') {
                    handleUserSearch({ target: document.getElementById('user-search-input') });
                }
                input.value = '';
            }
        }
        
        async function loadMaintenanceStatus() {
            const checkbox = document.getElementById('maintenance-checkbox');
            const saveBtn = document.getElementById('save-maintenance-btn');
            
            try {
                const data = await apiFetch('/api/admin/maintenance');
                if (data) checkbox.checked = data.maintenance_enabled;
            } catch {}
            
            saveBtn.addEventListener('click', async () => {
                const enabled = checkbox.checked;
                const result = await apiFetch('/api/admin/maintenance', {
                    method: 'POST', 
                    body: JSON.stringify({ enabled })
                });
                if (result) showToast('Statut de maintenance mis à jour !', 'success');
            });
        }

        async function createGlobalOffer() {
            const amount = parseInt(document.getElementById('offer-amount').value);
            const message = document.getElementById('offer-message').value;
        
            if (!amount || amount <= 0 || !message) {
                showToast("Veuillez remplir tous les champs.", "error");
                return;
            }
            
            try {
                const result = await apiFetch('/api/admin/create_offer', {
                    method: 'POST',
                    body: JSON.stringify({ amount, message })
                });
                if (result.success) {
                    showToast(result.message, "success");
                    document.getElementById('offer-amount').value = '';
                    document.getElementById('offer-message').value = '';
                }
            } catch (error) {
                showToast(error.error || "Une erreur est survenue.", "error");
            }
        }

        async function apiFetch(endpoint, options = {}) {
            const token = localStorage.getItem('jwt_token');
            const defaultOptions = { headers: { 'Content-Type': 'application/json' } };
            if (token) defaultOptions.headers['Authorization'] = `Bearer ${token}`;
            const mergedOptions = { ...defaultOptions, ...options };
            
            const response = await fetch(`${API_URL}${endpoint}`, mergedOptions);
            const responseData = await response.json();
            if (!response.ok) throw responseData;
            return responseData;
        }
        
        function showToast(message, type = 'success') {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = message;
            container.appendChild(toast);
            setTimeout(() => {
                toast.style.animation = 'fadeOut 0.5s forwards';
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }
    </script>
</body>
</html>
